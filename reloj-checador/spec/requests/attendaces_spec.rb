require "rails_helper"
require "shared_contexts"
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/attendaces", type: :request do
  # Attendace. As you add validations to Attendace, be sure to
  # adjust the attributes here as well.

  include_context "api request authentication helper methods"
  include_context "api request global before and after hooks"

  let!(:admin) { FactoryBot.create(:admin) }

  let(:company) {FactoryBot.create(:company)}

  let(:employee) { FactoryBot.create(:employee, company_id: company.id) }

  let(:valid_attributes) { FactoryBot.create(:attendace) }

  let(:valid_attributes_for_creation) { { private_number: "#{employee.private_number}", check_type: "OUT" } }

  let(:invalid_attributes) {
    { private_number: "", check_type: nil }
  }

  @is_needed_admin = true

  if @is_needed_admin
    before(:each) do
      @current_user = :admin
      login_as(admin, scope: :admin)
    end
  end

  describe "GET /index" do
    it "renders a successful response" do
      get attendaces_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      attendace = valid_attributes
      get attendace_url(attendace)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_attendace_url
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    @is_needed_admin = false
    context "with valid parameters" do
      it "creates a new Attendace" do
        expect {
          post attendaces_url, params: { attendace: valid_attributes_for_creation }
        }.to change(Attendace, :count).by(1)
      end

      it "redirects to the created attendace" do
        post attendaces_url, params: { attendace: valid_attributes_for_creation }
        expect(response).to redirect_to(new_attendace_url)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Attendace" do
        expect {
          post attendaces_url, params: { attendace: invalid_attributes }
        }.to change(Attendace, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post attendaces_url, params: { attendace: invalid_attributes }
        expect(response).to be_successful
      end
    end
    @is_needed_admin = true
  end
end
