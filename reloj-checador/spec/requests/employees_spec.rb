require "rails_helper"
require "shared_contexts"
# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/employees", type: :request do
  # Employee. As you add validations to Employee, be sure to
  # adjust the attributes here as well.
  include_context "api request authentication helper methods"
  include_context "api request global before and after hooks"

  let!(:admin) { FactoryBot.create(:admin) }
  let(:company) { FactoryBot.create(:company) }
  let(:valid_attributes) { FactoryBot.create(:employee, company_id: company.id) }

  let(:valid_attributes_for_creation) {
    { email: "test_emp@email.com",
      name: "Name",
      lastname: "Lastname",
      position: "position",
      private_number: "#{[*"0".."9"].sample(6).join}",
      active: true,
      company_id: valid_attributes.company_id }
  }

  let(:invalid_attributes) {
    { email: nil, name: nil, lastname: nil, position: nil, private_number: nil, active: nil, company_id: nil }
  }

  before(:each) do
    @current_user = :admin
    login_as(admin, scope: :admin)
  end

  describe "GET /index" do
    it "renders a successful response" do
      get employees_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      employee = valid_attributes
      get employee_url(employee)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_employee_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      employee = valid_attributes
      get edit_employee_url(employee)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Employee" do
        expect {
          post employees_url, params: { employee: valid_attributes_for_creation }
        }.to change(Employee, :count).by(2)
      end

      it "redirects to the created employee" do
        post employees_url, params: { employee: valid_attributes_for_creation }
        expect(response).to redirect_to(employees_url)
      end
    end

    context "with invalid parameters" do
      it "does not create a new Employee" do
        expect {
          post employees_url, params: { employee: invalid_attributes }
        }.to change(Employee, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post employees_url, params: { employee: invalid_attributes }
        expect(response).to redirect_to(new_employee_url)
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        { name: "Nameupdate", lastname: "Lastnameupdate", position: "position update", active: false }
      }

      it "updates the requested employee" do
        employee = valid_attributes
        patch employee_url(employee), params: { employee: new_attributes }
        employee.reload
        expect(employee.attributes).to include({ "name" => "#{new_attributes[:name]}", "lastname" => "#{new_attributes[:lastname]}",
                                                 "position" => "#{new_attributes[:position]}", "active" => new_attributes[:active] })
      end

      it "redirects to the employee" do
        employee = valid_attributes
        patch employee_url(employee), params: { employee: new_attributes }
        employee.reload
        expect(response).to redirect_to(employee_url(employee))
      end
    end

    context "with invalid parameters" do
      it "renders a successful response (i.e. to display the 'edit' template)" do
        employee = valid_attributes
        patch employee_url(employee), params: { employee: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end

  describe "DELETE /destroy" do
    it "change the requested employee`active to false" do
      employee = valid_attributes
      delete employee_url(employee)
      employee.reload
      expect(employee.attributes).to include({ "active" => false })
    end

    it "redirects to the employees list" do
      employee = valid_attributes
      delete employee_url(employee)
      expect(response).to redirect_to(employees_url)
    end
  end
end
